openapi: 3.0.0
info:
  description: Public API for NoljaNolja consumer
  version: 1.0.1
  title: NoljaNolja Swagger
  contact:
    email: nguyenbrother9x@gmail.com
tags:
  - name: User
    description: Operation relate to current user
  - name: Conversation
    description: Operation relate to conversation in general
  - name: Push Token
    description: Operation relate to push token
  - name: Conversation Detail
    description: Operation relate to conversation detail
paths:
  /api/v1/users/me:
    get:
      tags: [User]
      summary: Get Current logged-in user info
      description: Return user info with preference/setting
      security:
        - bearerAuth: []
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
    put:
      tags: [User]
      summary: Update Current logged-in user info
      description: Return updated user info with preference/setting
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                gender:
                  type: string
                dob:
                  type: string
                preferences:
                  $ref: "#/components/schemas/UserPreference"
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
    post:
      tags: [User]
      summary: Update current user info using file
      description: Upload corresponding file to cloud, and update current user info if necessary. Return data related to uploaded file
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [field, files]
              properties:
                field:
                  type: string
                  enum: [AVATAR]
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/UserFileUpload"
    delete:
      tags: [User]
      summary: Delete user
      description: This will remove user on both on firebase and noljanolja
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /api/v1/users/me/contacts:
    post:
      tags: [User]
      summary: Sync contact list
      description: This will sync data from user contact list to user friend list in server
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ contacts ]
              properties:
                contacts:
                  type: array
                  items:
                    $ref: "#/components/schemas/LocalContact"
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
  /api/v1/push-tokens:
    get:
      tags: [Push Token]
      summary: Get list of push token
      description: Return list of token registered for this user
      responses:
        "200":
          description: on Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: string
    post:
      tags: [ Push Token ]
      summary: Update push token
      description: Register a push token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ userId, deviceToken, deviceType ]
              properties:
                userId:
                  type: string
                deviceToken:
                  type: string
                deviceType:
                  type: string
      responses:
        "200":
          description: on Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /api/v1/conversations:
    get:
      tags: [Conversation]
      summary: Get list of conversation of current user
      description: Include recent participants and sender
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Conversation"
    post:
      tags: [ Conversation ]
      summary: Create a conversation
      description: Include participants, and return created conversation
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, participantIds, type]
              properties:
                title:
                  type: string
                participantIds:
                  type: array
                  items:
                    type: string
                type:
                  $ref: "#/components/schemas/ConversationType"
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Conversation"
  /api/v1/conversations/{conversationId}:
    get:
      tags: [Conversation Detail]
      summary: Get conversation detail
      description: Include all participants, and many recent messages
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: conversationId
          schema:
            type: number
          description: the id of the conversation
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Conversation"
  /api/v1/conversations/{conversationId}/messages:
    get:
      tags: [ Conversation Detail ]
      summary: Get conversation's messages
      description: Return conversation messages with filter. Currently, maximum amount of messages returned are 20 per batch
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: conversationId
          schema:
            type: number
          description: the id of the conversation
        - in: query
          name: beforeMessageId
          schema:
            type: number
          description: filter messages that were created before provided messageId
        - in: query
          name: afterMessageId
          schema:
            type: number
          description: filter messages that were created after provided messageId
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Conversation"
    post:
      tags: [ Conversation Detail ]
      summary: Send a message/chat
      description: Add a message to a conversation and update last sender status
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: conversationId
          schema:
            type: number
          description: the id of the conversation
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [message, type]
              properties:
                message:
                  type: string
                type:
                  $ref: "#/components/schemas/MessageType"
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Message"
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token from firebase (do not put 'bearer' in here)
      name: Bearer Token
  schemas:
    BaseResponse:
      type: object
      required: [code, message]
      properties:
        code:
          type: integer
        message:
          type: string
    User:
      type: object
      required: [id]
      properties:
        id:
          type: string
        name:
          type: string
        avatar:
          type: string
        pushToken:
          type: string
        phone:
          type: string
        email:
          type: string
        isEmailVerified:
          type: boolean
        dob:
          type: string
          description: in date format
          example: 2023-03-10 04:04:43
        gender:
          $ref: "#/components/schemas/Gender"
        preferences:
          $ref: "#/components/schemas/UserPreference"
        createdAt:
          type: string
          description: in date format
          example: 2023-03-10 04:04:43
        updatedAt:
          type: string
          description: in date format
          example: 2023-03-10 04:04:43
    UserPreference:
      type: object
      properties:
        collectAndUsePersonalInfo:
          type: boolean
    LocalContact:
      type: object
      properties:
        name:
          type: string
        emails:
          type: array
          items:
            type: string
        phones:
          type: array
          items:
            type: string
    Gender:
      type: string
      enum: [ MALE, FEMALE, OTHER ]
    UserFileUpload:
      type: object
      properties:
        path:
          type: string
        size:
          type: number
        md5:
          type: string
    ConversationType:
      type: string
      enum: [ SINGLE, GROUP ]
    Conversation:
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        creator:
          $ref: "#/components/schemas/User"
        type:
          $ref: "#/components/schemas/ConversationType"
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
        participants:
          type: array
          items:
            $ref: "#/components/schemas/User"
        createdAt:
          type: string
        updatedAt:
          type: string
    Message:
      type: object
      properties:
        id:
          type: number
        conversationId:
          type: number
        message:
          type: string
        sender:
          $ref: "#/components/schemas/User"
        type:
          $ref: "#/components/schemas/MessageType"
        createdAt:
          type: string
    MessageType:
      type: string
      enum: [ PLAINTEXT, STICKER, GIF, PHOTO, DOCUMENT ]