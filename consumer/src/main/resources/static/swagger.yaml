openapi: 3.0.0
info:
  description: Public API for NoljaNolja consumer
  version: 1.0.0
  title: NoljaNolja Swagger
  contact:
    email: nguyenbrother9x@gmail.com
tags:
  - name: User
    description: Operation relate to current user
paths:
  /api/v1/users/me:
    get:
      tags:
        - User
      summary: Get Current logged-in user info
      description: Return user info with preference/setting
      security:
        - bearerAuth: []
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 0
                  message:
                    type: string
                    example: success
                  data:
                    $ref: "#/components/schemas/User"
    put:
      tags:
        - User
      summary: Update Current logged-in user info
      description: Return updated user info with preference/setting
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                gender:
                  type: string
                dob:
                  type: string
                preferences:
                  $ref: "#/components/schemas/UserPreference"
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 0
                  message:
                    type: string
                    example: success
                  data:
                    $ref: "#/components/schemas/UserPreference"
    post:
      tags:
        - User
      summary: Update current user info using file
      description: Upload corresponding file to cloud, and update current user info if necessary. Return data related to uploaded file
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [field, files]
              properties:
                field:
                  type: string
                  enum: [AVATAR]
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                type: object
                required: [ code, message ]
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 0
                  message:
                    type: string
                    example: success
                  data:
                    $ref: "#/components/schemas/UserFileUpload"
    delete:
      tags:
        - User
      summary: Delete user
      description: This will remove user on both on firebase and noljanolja
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                type: object
                required: [ code, message ]
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 0
                  message:
                    type: string
                    example: success
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token from firebase
      name: Bearer Token
  schemas:
    User:
      type: object
      required: [id]
      properties:
        id:
          type: string
        name:
          type: string
        avatar:
          type: string
        pushToken:
          type: string
        phone:
          type: string
        email:
          type: string
        isEmailVerified:
          type: boolean
        gender:
          type: string
          enum: [MALE, FEMALE, OTHER]
        preferences:
          $ref: "#/components/schemas/UserPreference"
    UserPreference:
      type: object
      properties:
        collectAndUsePersonalInfo:
          type: boolean
    UserFileUpload:
      type: object
      properties:
        path:
          type: string
        size:
          type: number
        md5:
          type: string