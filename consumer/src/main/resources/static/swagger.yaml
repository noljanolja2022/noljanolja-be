openapi: 3.0.0
info:
  description: |
    Changelog - 7/12/2023:
      - Allow search for video using query
  version: 1.0.5
  title: NoljaNolja Swagger
  contact:
    email: nguyenbrother9x@gmail.com
tags:
  - name: User
    description: Operation relate to current user
  - name: Conversation
    description: Operation relate to conversation in general
  - name: Conversation Participant
    description: Modifying member of a conversation
  - name: Push Token
    description: Operation relate to push token
  - name: Message
    description: Operation relate to message
  - name: Media
    description: Stickers, emojis, etc.
  - name: Gift
paths:
  /api/v1/users/me:
    get:
      tags: [ User ]
      summary: Get Current logged-in user info
      description: Return user info with preference/setting
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
    put:
      tags: [ User ]
      summary: Update Current logged-in user info
      description: Return updated user info with preference/setting
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                gender:
                  type: string
                dob:
                  type: string
                preferences:
                  $ref: "#/components/schemas/UserPreference"
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
    post:
      tags: [ User ]
      summary: Update current user info using file
      description: Upload corresponding file to cloud, and update current user info if necessary. Return data related to uploaded file
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [ field, files ]
              properties:
                field:
                  type: string
                  enum: [ AVATAR ]
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/UserFileUpload"
    delete:
      tags: [ User ]
      summary: Delete user
      description: This will remove user on both on firebase and noljanolja
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /api/v1/users/me/block:
    put:
      tags: [ User ]
      summary: Block a user
      description: Block a user
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                blockedUserId:
                  type: string
                isBlocked:
                  type: boolean
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
  /api/v1/users/me/black-list:
    get:
      tags: [ User ]
      summary: Get user black list
      description: Get user black list
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: page
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: string
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/SimpleUser"
                      pagination:
                        $ref: "#/components/schemas/Pagination"
  /api/v1/users/me/checkin:
    post:
      tags: [ User ]
      summary: Daily checkin
      description: Daily checkin
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
  /api/v1/users/me/referral:
    put:
      tags: [ User ]
      summary: Add a referral code to get get reward
      description: Add a referral code to get reward
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                referredByCode:
                  type: string
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
  /api/v1/users/me/checkin-progresses:
    get:
      tags: [ User ]
      summary: Get user checkin progresses
      description: Get user checkin progresses
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/CheckinProgress"

  /api/v1/users:
    get:
      tags: [ User ]
      summary: Find users
      description: Return list of users based on query provided
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: phoneNumber
          schema:
            $ref: "#/components/schemas/phoneNumber"
        - in: query
          name: friendId
          schema:
            type: string
          description: the id of the user
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/SimpleUser"
  /api/v1/users/me/contacts:
    get:
      tags: [ User ]
      summary: Get all contacts of current user
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: page
          schema:
            $ref: "#/components/schemas/page"
        - in: query
          name: pageSize
          schema:
            $ref: "#/components/schemas/pageSize"
      responses:
        "200":
          description: On success, return all contacts of current user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
    post:
      tags: [ User ]
      summary: Sync contact list
      description: This will sync data from user contact list to user friend list in server
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ contacts ]
              properties:
                contacts:
                  type: array
                  items:
                    $ref: "#/components/schemas/LocalContact"
      responses:
        "200":
          description: On success, return newly added contacts
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
  /api/v1/users/me/contacts/invite:
    post:
      tags: [ User ]
      summary: Invite a person to become a friend
      description: Currently, this will directly add a specified user as friend, and add yourself to that user contact list
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ friendId ]
              properties:
                friendId:
                  type: string
                  description: id of the user being invited
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"

  /api/v1/push-tokens:
    post:
      tags: [ Push Token ]
      summary: Update push token
      description: Register a push token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ deviceToken, deviceType ]
              properties:
                deviceToken:
                  type: string
                deviceType:
                  type: string
      responses:
        "200":
          description: on Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /api/v1/conversations:
    get:
      tags: [ Conversation ]
      summary: Get list of conversation of current user
      description: Include recent participants and sender
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Conversation"
    post:
      tags: [ Conversation ]
      summary: Create a conversation
      description: Include participants, and return created conversation
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [ title, participantIds, type ]
              properties:
                title:
                  type: string
                participantIds:
                  type: array
                  items:
                    type: string
                type:
                  $ref: "#/components/schemas/ConversationType"
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Conversation"
  /api/v1/conversations/{conversationId}:
    get:
      tags: [ Conversation ]
      summary: Get conversation detail
      description: Include all participants, and many recent messages
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: conversationId
          schema:
            type: number
          description: the id of the conversation
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Conversation"
    put:
      tags: [ Conversation ]
      summary: Update conversation
      description: |
        On success, will also fire socket depending on the info provided   
        Type *EVENT_UPDATED* + content *TITLE* if updating title   
        Type *EVENT_UPDATED* + content *AVATAR* if updating title
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: conversationId
          schema:
            type: number
          description: the id of the conversation
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                participantIds:
                  type: array
                  items:
                    type: string
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Conversation"
  /api/v1/conversations/{conversationId}/participants:
    put:
      tags: [ 'Conversation Participant' ]
      summary: Add member to a conversation
      description: Provide ids of the participants to be added to a conversation
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: conversationId
          schema:
            type: number
          description: the id of the conversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                participantIds:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: On success, return ids of the participants added to this conversation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: string
    delete:
      tags: [ 'Conversation Participant' ]
      summary: Remove member from a conversation
      description: |
        Provide ids of the participants to be removed from a conversation   
        To remove oneself (basically leave) a conversation, provide your own id   
        If you are not removing yourself, you need to be group admin to initiate this operation
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: conversationId
          schema:
            type: number
          description: the id of the conversation
        - in: query
          name: participantIds
          schema:
            type: string
          description: the ids of the member, separated by ","
      responses:
        "200":
          description: On success, return ids of the participants removed from this conversation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: string
  /api/v1/conversations/{conversationId}/admin:
    put:
      tags: [ 'Conversation Participant' ]
      summary: Assign a person to be admin of a conversation
      description: Provide id of the new admin
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: conversationId
          schema:
            type: number
          description: the id of the conversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                assigneeId:
                  type: string
      responses:
        "200":
          description: On success, return id of the new admin
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: string
  /api/v1/conversations/{conversationId}/messages:
    get:
      tags: [ Message ]
      summary: Get conversation's messages
      description: Return conversation messages with filter. Currently, maximum amount of messages returned are 20 per batch
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: conversationId
          schema:
            type: number
          description: the id of the conversation
        - in: query
          name: beforeMessageId
          schema:
            type: number
          description: filter messages that were created before provided messageId
        - in: query
          name: afterMessageId
          schema:
            type: number
          description: filter messages that were created after provided messageId
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Conversation"
    post:
      tags: [ Message ]
      summary: Send a message/chat
      description: Add a message to a conversation and update last sender status
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: conversationId
          schema:
            type: number
          description: the id of the conversation
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [ message, type ]
              properties:
                message:
                  type: string
                  description: |
                    The content of the message. Format varies depending on the type.  
                    Examples:
                    - PLAINTEXT: Hi this is a message
                    - STICKER: 3/01.png {stickerPackId}/{stickerFileName}
                type:
                  $ref: "#/components/schemas/MessageType"
                attachments:
                  type: array
                  items:
                    type: string
                    format: binary
                localId:
                  type: string
                shareMessageId:
                  type: number
                  format: int64
                  nullable: true
                replyToMessageId:
                  type: number
                  format: int64
                  nullable: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Message"
  /api/v1/conversations/messages:
    post:
      tags: [ Message ]
      summary: Share a message/chat
      description: Share message to multiple conversations
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [ message, type ]
              properties:
                message:
                  type: string
                  description: |
                    The content of the message. Format varies depending on the type.  
                    Examples:
                    - PLAINTEXT: Hi this is a message
                    - STICKER: 3/01.png {stickerPackId}/{stickerFileName}
                type:
                  $ref: "#/components/schemas/MessageType"
                attachments:
                  type: array
                  items:
                    type: string
                    format: binary
                shareMessageId:
                  type: number
                  format: int64
                  nullable: true
                replyToMessageId:
                  type: number
                  format: int64
                  nullable: true
                shareVideoId:
                  type: string
                  nullable: true
                conversationIds:
                  type: array
                  items:
                    type: number
                    format: int64
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Message"
  /api/v1/conversations/{conversationId}/messages/{messageId}:
    delete:
      tags: [ Message ]
      summary: Delete a message
      description: Delete a message
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: conversationId
          schema:
            type: number
          description: the id of the conversation
        - in: query
          name: messageId
          schema:
            type: number
          description: the id of the message to remove
        - in: query
          name: removeForSelfOnly
          schema:
            type: boolean
          required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
  /api/v1/conversations/{conversationId}/messages/{messageId}/seen:
    post:
      tags: [ Message ]
      summary: Seen a message
      description: Seen a message
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: conversationId
          schema:
            type: number
          description: the id of the conversation
        - in: path
          name: messageId
          schema:
            type: number
          description: the id of the message
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
  /api/v1/conversations/{conversationId}/messages/{messageId}/reactions/{reactionId}:
    put:
      tags: [ Message ]
      summary: React a message
      description: React a message
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: conversationId
          schema:
            type: number
          description: the id of the conversation
        - in: path
          name: messageId
          schema:
            type: number
          description: the id of the message
        - in: path
          name: reactionId
          schema:
            type: number
          description: id of the reaction icon
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
  /api/v1/conversations/{conversationId}/messages/{messageId}/reactions:
    delete:
      tags: [ Message ]
      summary: Clear all reactions from a message
      description: Clear all reactions from a message
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: conversationId
          schema:
            type: number
          description: the id of the conversation
        - in: path
          name: messageId
          schema:
            type: number
          description: the id of the message
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
  /api/v1/conversations/react-icons:
    get:
      tags: [ Message ]
      summary: Return all reaction icons
      description: Return all reaction icons
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/MessageReactionIcon"
  /api/v1/conversations/{conversationId}/attachments/{attachmentId}:
    get:
      tags: [ Conversation ]
      summary: Download attachment
      description: Download attachment
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Return a file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/v1/media/sticker-packs:
    get:
      tags: [ Media ]
      summary: Retrieve sticker packs of current user
      description: Currently retrieve all available sticker packs
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/StickerPack"
  /api/v1/media/sticker-packs/{stickerPackId}:
    get:
      tags: [ Media ]
      summary: Retrieve sticker pack
      description: This will trigger download of a zip file
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: stickerPackId
          schema:
            type: number
          description: the id of the sticker pack
      responses:
        "200":
          description: On success, download a zip file with name `stickerPackId`.zip. The zip file will include a tray image, all sticker images, and a content.json metadata file for this sticker pack
  /api/v1/media/sticker-packs/{stickerPackId}/{stickerFile}:
    get:
      tags: [ Media ]
      summary: Retrieve a sticker image
      description: This will trigger download an image file with extension depend on the provided name
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: stickerPackId
          schema:
            type: number
          description: the id of the sticker pack
        - in: path
          name: stickerFile
          schema:
            type: string
          description: the file name of the sticker
          example: 01_Hi.webp
      responses:
        "200":
          description: On success, this should trigger a download
  /api/v1/media/videos:
    get:
      tags: [ Video ]
      summary: Querying for videos
      description: Querying for videos matching certain criteria
      security:
        - bearerAuth: [ ]
      parameters:
        - name: query
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            $ref: '#/components/schemas/page'
        - name: pageSize
          in: query
          schema:
            $ref: '#/components/schemas/pageSize'
        - name: isHighlighted
          in: query
          schema:
            type: boolean
          required: false
        - name: categoryId
          in: query
          schema:
            type: string
          required: false
      responses:
        "200":
          description: Return a list of videos matching the query params
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Video"
  /api/v1/media/videos/watching:
    get:
      tags: [ Video ]
      summary: Querying for watching videos
      description: Only return videos that user watched, but not finished watching
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Return a list of videos, with currentProgress indicating where user stopped watching last time
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Video"
  /api/v1/media/videos/trending:
    get:
      tags: [ Video ]
      summary: Get trending videos
      description: Get trending videos
      security:
        - bearerAuth: [ ]
      parameters:
        - name: duration
          in: query
          schema:
            type: string
            enum:
              - day
              - week
              - month
          required: true
        - name: limit
          in: query
          schema:
            $ref: '#/components/schemas/pageSize'
          required: false
      responses:
        "200":
          description: Return a list of trending videos
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Video"
  /api/v1/media/videos/{videoId}/comments:
    get:
      tags: [ Video ]
      summary: Get video comments
      description: Get video comments
      security:
        - bearerAuth: [ ]
      parameters:
        - name: limit
          in: query
          schema:
            $ref: '#/components/schemas/pageSize'
        - name: beforeCommentId
          in: query
          schema:
            type: boolean
          description: Return comments that are older than a comment. For example, beforeCommentId = 7 would return comment id 6, 5, 4,...
          required: true
        - name: videoId
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Return a list of comments of the video
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/VideoComment"
    post:
      tags: [ Video ]
      summary: Post a comment
      description: Post a comment. If a token (without the perfix Bearer) is supplied, will attempt to post a comment on youtube directly as well.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: videoId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  required: true
                youtubeToken:
                  type: string
                  required: false
                  description: the exchange token with sufficient scope to post a comment on youtube video
      responses:
        "200":
          description: Return the created comment
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/VideoComment"
  /api/v1/media/videos/{videoId}/likes:
    post:
      tags: [ Video ]
      summary: Like a video
      description: Like a video
      security:
        - bearerAuth: [ ]
      parameters:
        - name: videoId
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Return the created comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
  /api/v1/media/videos/{videoId}:
    get:
      tags: [ Video ]
      summary: Get video details
      description: Get video details
      security:
        - bearerAuth: [ ]
      parameters:
        - name: videoId
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Return details of the video
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Video"
  /api/v1/loyalty/me:
    get:
      tags: [ Loyalty ]
      summary: Get my member info
      description: Get my member info
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Return my member info
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/MemberInfo"
  /api/v1/loyalty/me/points:
    get:
      tags: [ Loyalty ]
      summary: Get my loyalty points
      description: Get my loyalty points
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: lastOffsetDate
          schema:
            type: string
            format: datetime
        - in: query
          name: type
          schema:
            type: string
            enum: [ ALL, RECEIVED, SPENT ]
        - in: query
          name: month
          schema:
            type: number
            format: int32
            description: Value 1 (January), 2 (February),.... 12 (December)
        - in: query
          name: year
          schema:
            type: number
            format: int32
            description: Value 2023 or 2022 or 2021....
      responses:
        "200":
          description: Return my loyalty points
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/LoyaltyPoint"
  /api/v1/gifts/me:
    get:
      tags: [ Gift ]
      summary: Get my gifts
      description: Get my gifts
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: categoryId
          schema:
            type: number
            format: int64
          required: false
        - in: query
          name: brandId
          schema:
            type: number
            format: int64
          required: false
        - in: query
          name: page
          schema:
            type: number
            format: integer
          required: false
        - in: query
          name: pageSize
          schema:
            type: number
            format: integer
          required: false
        - in: query
          name: name
          schema:
            type: string
          required: false
      responses:
        "200":
          description: Return my gifts
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/MyGift"
  /api/v1/gifts:
    get:
      tags: [ Gift ]
      summary: Get gifts in shop
      description: Get gifts in shop
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: categoryId
          schema:
            type: number
            format: int64
          required: false
        - in: query
          name: brandId
          schema:
            type: number
            format: int64
          required: false
        - in: query
          name: page
          schema:
            type: number
            format: integer
          required: false
        - in: query
          name: pageSize
          schema:
            type: number
            format: integer
          required: false
        - in: query
          name: name
          schema:
            type: string
          required: false
      responses:
        "200":
          description: Return gifts
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Gift"
  /api/v1/gifts/brands:
    get:
      tags: [ Gift ]
      summary: Get gift brands
      description: Get gift brands
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: page
          schema:
            type: number
            format: integer
          required: false
        - in: query
          name: pageSize
          schema:
            type: number
            format: integer
          required: false
      responses:
        "200":
          description: Return gift brands
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/GiftBrand"
  /api/v1/gifts/categories:
    get:
      tags: [ Gift ]
      summary: Get gift categories
      description: Get gift categories
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Return all gift categories
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/GiftCategory"
  /api/v1/gifts/{giftId}:
    get:
      tags: [ Gift ]
      summary: Get detail of gift
      description: Get detail of gift
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: giftId
          schema:
            type: number
            format: int64
          required: true
      responses:
        "200":
          description: Return gift's detail
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Gift"
  /api/v1/gifts/{giftId}/buy:
    post:
      tags: [ Gift ]
      summary: Buy a gift
      description: Buy a gift
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: giftId
          schema:
            type: number
            format: int64
          required: true
      responses:
        "200":
          description: Return empty response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/MyGift"
  /api/v1/banners:
    get:
      tags: [ Banner ]
      summary: Get all active banners
      description: Get all active banners
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: page
          schema:
            type: number
            format: integer
          required: false
        - in: query
          name: pageSize
          schema:
            type: number
            format: integer
          required: false
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponseWithPagination"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Banner"
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token from firebase (do not put 'bearer' in here)
      name: Bearer Token
  schemas:
    BaseResponse:
      type: object
      required: [ code, message ]
      properties:
        code:
          type: integer
        message:
          type: string
    BaseResponseWithPagination:
      type: object
      required: [ code, message ]
      properties:
        code:
          type: integer
        message:
          type: string
        pagination:
          $ref: '#/components/schemas/Pagination'
    Pagination:
      type: object
      properties:
        page:
          type: number
          format: integer
        pageSize:
          type: number
          format: integer
        total:
          type: number
          format: int64
    User:
      type: object
      required: [ id ]
      properties:
        id:
          type: string
        name:
          type: string
        avatar:
          type: string
        pushToken:
          type: string
        phone:
          type: string
        email:
          type: string
        isEmailVerified:
          type: boolean
        dob:
          type: string
          description: in date format
          example: 2023-03-10 04:04:43
        gender:
          $ref: "#/components/schemas/Gender"
        preferences:
          $ref: "#/components/schemas/UserPreference"
        createdAt:
          type: string
          description: in date format
          example: 2023-03-10 04:04:43
        updatedAt:
          type: string
          description: in date format
          example: 2023-03-10 04:04:43
        referralCode:
          type: string
          required: true
        referredBy:
          type: string
    SimpleUser:
      type: object
      required: [ id ]
      properties:
        id:
          type: string
        name:
          type: string
        avatar:
          type: string
        phone:
          type: string
    UserPreference:
      type: object
      properties:
        collectAndUsePersonalInfo:
          type: boolean
    LocalContact:
      type: object
      properties:
        name:
          type: string
        emails:
          type: array
          items:
            type: string
        phones:
          type: array
          items:
            type: string
    Gender:
      type: string
      enum: [ MALE, FEMALE, OTHER ]
    UserFileUpload:
      type: object
      properties:
        path:
          type: string
        size:
          type: number
        md5:
          type: string
    ConversationType:
      type: string
      enum: [ SINGLE, GROUP ]
    Conversation:
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        creator:
          $ref: "#/components/schemas/User"
        admin:
          $ref: "#/components/schemas/User"
        type:
          $ref: "#/components/schemas/ConversationType"
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
        participants:
          type: array
          items:
            $ref: "#/components/schemas/User"
        imageUrl:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    Message:
      type: object
      properties:
        id:
          type: number
        conversationId:
          type: number
        message:
          type: string
        sender:
          $ref: "#/components/schemas/User"
        type:
          $ref: "#/components/schemas/MessageType"
        seenBy:
          type: array
          items:
            type: string
        attachments:
          type: array
          items:
            $ref: "#/components/schemas/Attachment"
        localId:
          type: string
        createdAt:
          type: string
        reactions:
          type: array
          items:
            $ref: "#/components/schemas/MessageReaction"
        replyToMessage:
          $ref: "#/components/schemas/Message"
        shareMessage:
          $ref: "#/components/schemas/Message"
        shareVideo:
          $ref: "#/components/schemas/Video"

    MessageType:
      type: string
      enum: [ PLAINTEXT, STICKER, GIF, PHOTO, DOCUMENT, EVENT_UPDATED, EVENT_LEFT, EVENT_JOIN ]
      description: |
        EVENT_ type are special messageType, that will be returned to client via socket
        Everything else are for client to send.
    Attachment:
      type: object
      properties:
        id:
          type: number
        messageId:
          type: number
        name:
          type: string
          description: Server assign a unique name for each attachment
        originalName:
          type: string
          description: Original name of the file
        size:
          type: number
          description: Size of the file in bytes
        type:
          type: string
          description: Type of the file
          example: image/jpeg
        md5:
          type: string
    StickerPack:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        publisher:
          type: string
        trayImageFile:
          type: string
          description: the preview image of all the sticker
        isAnimated:
          type: boolean
          description: whether this sticker is animated
        stickers:
          type: array
          items:
            $ref: "#/components/schemas/Sticker"
    Sticker:
      type: object
      properties:
        image_file:
          type: string
          description: name of the sticker image file
        emojis:
          type: array
          items:
            type: string
            description: All emojis that this sticker will represent
    phoneNumber:
      type: string
      description: |
        The formatted phone number.   
        *Important, the + sign must be encoded
      example: '%2B84913042222'
    page:
      type: integer
      description: the pagination, divided per batch. Use in conjunction with pageSize
      example: 1
    pageSize:
      type: integer
      description: the size of each batch. Use in conjunction with pageSize
      example: 100
    Video:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
        publishedAt:
          type: string
          format: date-time
        title:
          type: string
        thumbnail:
          type: string
        duration:
          type: string
          description: |
            If the video is at least one hour long, the duration is in the format PT#H#M#S, 
            in which the # preceding the letter H specifies the length of the video in hours and all of the other details are the same as described above.
            If the video is at least one day long, the letters P and T are separated, and the value's format is P#DT#H#M#S. 
            Please refer to the ISO 8601 specification for complete details.
        durationMs:
          type: number
          format: int64
        currentProgress:
          type: number
          format: int64
        viewCount:
          type: number
        likeCount:
          type: number
        commentCount:
          type: number
        favoriteCount:
          type: number
        isHighlighted:
          type: boolean
        comments:
          type: array
          items:
            $ref: '#/components/schemas/VideoComment'
        channel:
          type: object
          properties:
            id:
              type: string
            title:
              type: string
            thumbnail:
              type: string
        category:
          type: object
          properties:
            id:
              type: string
            title:
              type: string
        earnedPoints:
          type: number
          format: int64
        totalPoints:
          type: number
          format: int64
        completed:
          type: boolean
          description: whether user has receive all the reward for this video
        rewardProgresses:
          type: array
          items:
            type: object
            properties:
              point:
                type: number
                format: int64
              progressMs:
                type: number
                format: int64
                description: reward progress in milliseconds
              claimedAts:
                type: array
                items:
                  type: string
                  format: datetime
              completed:
                type: boolean
    VideoComment:
      type: object
      required:
        - id
        - comment
        - commenter
        - createdAt
        - updatedAt
      properties:
        id:
          type: number
          format: int64
        comment:
          type: string
        commenter:
          type: object
          properties:
            name:
              type: string
            avatar:
              type: string
        createdAt:
          type: string
          format: datetime
          description: in date format
          example: 2023-03-10 04:04:43
        updatedAt:
          type: string
          format: datetime
          description: in date format
          example: 2023-03-10 04:04:43
    MemberInfo:
      type: object
      properties:
        memberId:
          type: string
        point:
          type: number
          format: int64
          description: Total spendable points
        accumulatedPointsToday:
          type: number
          format: int64
          description: Total points accumulated today
        exchangeablePoints:
          type: number
          format: int64
          description: Total exchangeable points
        currentTier:
          $ref: '#/components/schemas/LoyaltyTier'
        currentTierMinPoint:
          type: number
          format: int64
        nextTier:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/LoyaltyTier'
        nextTierMinPoint:
          type: number
          format: int64
          nullable: true
    LoyaltyPoint:
      type: object
      properties:
        id:
          type: string
        reason:
          type: string
        amount:
          type: number
          format: int64
        status:
          type: string
          enum: [ COMPLETED, PENDING ]
        createdAt:
          type: string
          format: datetime
          description: in date format
          example: 2023-03-10 04:04:43
    LoyaltyTier:
      type: string
      enum: [ BRONZE, SILVER, GOLD, DIAMOND ]
    Gift:
      type: object
      properties:
        id:
          type: number
          format: int64
        name:
          type: string
        description:
          type: string
        image:
          type: string
        startTime:
          type: string
          format: datetime
        endTime:
          type: string
          format: datetime
        price:
          type: number
          format: int64
        total:
          type: number
          format: integer
        remaining:
          type: number
          format: integer
        isPurchasable:
          type: boolean
        category:
          $ref: '#/components/schemas/GiftCategory'
        brand:
          $ref: '#/components/schemas/GiftBrand'
    MyGift:
      type: object
      properties:
        id:
          type: number
          format: int64
        name:
          type: string
        description:
          type: string
        image:
          type: string
        code:
          type: string
        category:
          $ref: '#/components/schemas/GiftCategory'
        brand:
          $ref: '#/components/schemas/GiftBrand'
    GiftBrand:
      type: object
      properties:
        id:
          type: number
          format: int64
        name:
          type: string
        image:
          type: string
    GiftCategory:
      type: object
      properties:
        id:
          type: number
          format: int64
        code:
          type: string
        image:
          type: string
    MessageReaction:
      type: object
      properties:
        reactionId:
          type: number
          format: integer
        reactionCode:
          type: string
        reactionDescription:
          type: string
        userId:
          type: string
        userName:
          type: string
    MessageReactionIcon:
      type: object
      properties:
        id:
          type: number
          format: int64
        code:
          type: string
        description:
          type: string
        isDefault:
          type: boolean
        codeInactive:
          type: string
    Banner:
      type: object
      properties:
        id:
          type: number
          format: int64
        title:
          type: string
        description:
          type: string
        content:
          type: string
        image:
          type: string
        isActive:
          type: boolean
        priority:
          type: string
          enum: [ LOW, MEDIUM, HIGH, URGENT ]
        action:
          type: string
          enum: [ NONE, LINK, SHARE, CHECKIN ]
        startTime:
          type: string
          format: datetime
        endTime:
          type: string
          format: datetime
    CheckinProgress:
      type: object
      properties:
        id:
          type: number
          format: int64
        day:
          type: number
          format: integer
        rewardPoints:
          type: number
          format: Long
        isCompleted:
          type: boolean


